
GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.


Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON. 
	На сайте Github нажать "Create a new repository", ввести его название и описание.
 5. Клонировать репозиторий JSON на локальный компьютер. 
	git clone ссылка на репозиторий.
 6. Внутри локального JSON создать файл “new.json”. 
	cat > new.json, ввести в него данные, нажать ctrl+c.
 7. Добавить файл под гит.
	git add название файла
 8. Закоммитить файл.
	git commit ввести комментарий
 9. Отправить файл на внешний GitHub репозиторий. - 
	git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
	vim new.json
 11. Отправить изменения на внешний репозиторий.
	git status, git add new.json, git commit, git push
 12. Создать файл preferences.json
	touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
	vim preferences.json
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
	touch skill.json, vim skills.json
 15. Отправить сразу 2 файла на внешний репозиторий.
	git status, git add название_файла название_файла, git commit, git push
 16. На веб интерфейсе создать файл bug_report.json.
	Add file, create new file
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Commit new file
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
	Открыть файл, нажать Edit this file, добавить нужную информацию в body док-та
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Нажать Commit changes
 20. Синхронизировать внешний и локальный репозиторий JSON
	git pull

XML
 21. Создать внешний репозиторий c названием XML.
	На сайте Github нажать "Create a new repository", ввести его название и описание.
 22. Клонировать репозиторий XML на локальный компьютер.
	git clone ссылка на репозиторий.
 23. Внутри локального XML создать файл “new.xml”.
	touch new.xml
 24. Добавить файл под гит.
	git add new.xml
 25. Закоммитить файл.
	git commit 
 26. Отправить файл на внешний GitHub репозиторий.
	git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
	vim new.xml 
28. Отправить изменения на внешний репозиторий.
	git status, git add new.xml, git commit, git push
 29. Создать файл preferences.xml
	touch preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 	vim preferences.xml
31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
	touch skills.xml
 32. Сделать коммит в одну строку.
	git commit  
 33. Отправить сразу 2 файла на внешний репозиторий.
	git push
 34. На веб интерфейсе создать файл bug_report.xml.
	add file, create new file
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Commit new file
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
	Открыть файл, нажать Edit this file, добавить нужную информацию в body док-та
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Нажать Commit changes
 38. Синхронизировать внешний и локальный репозиторий XML
	git pull
	
TXT
 1. Создать внешний репозиторий c названием TXT.
	На сайте Github нажать "Create a new repository", ввести его название и описание.
 2. Клонировать репозиторий TXT на локальный компьютер.
	git clone ссылка на репозиторий.
 3. Внутри локального TXT создать файл “new.txt”.
	touch new.txt
 4. Добавить файл под гит.
	git add new.txtgit 
 5. Закоммитить файл.
	git commit
 6. Отправить файл на внешний GitHub репозиторий.
	git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
	 vim new.txt
8. Отправить изменения на внешний репозиторий.
	git status, git add new.xml, git commit, git push
 9. Создать файл preferences.txt
	touch preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
	vim preferences.txt 
11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
	touch skills.txt
 12. Сделать коммит в одну строку.
	git commit
 13. Отправить сразу 2 файла на внешний репозиторий.
	git push
 14. На веб интерфейсе создать файл bug_report.txt.
	add file, create new file
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Commit new file
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
	Открыть файл, нажать Edit this file, добавить нужную информацию в body док-та
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Нажать Commit changes
 18. Синхронизировать внешний и локальный репозиторий TXT
	git pull